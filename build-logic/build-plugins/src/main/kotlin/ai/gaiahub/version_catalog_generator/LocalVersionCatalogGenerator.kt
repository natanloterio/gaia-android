package ai.gaiahub.version_catalog_generator

import kotlin.collections.iterator

object LocalVersionCatalogGenerator {
    fun generate(tomlContent: String): String {
        val lines = tomlContent.lines()
        val versions = mutableMapOf<String, String>()
        val libraries = mutableMapOf<String, Map<String, String>>()

        var currentSection = ""

        for (line in lines) {
            val trimmedLine = line.trim()
            when {
                trimmedLine.startsWith("[versions]") -> {
                    currentSection = "versions"
                }
                trimmedLine.startsWith("[libraries]") -> {
                    currentSection = "libraries"
                }
                trimmedLine.isEmpty() -> continue
                trimmedLine.startsWith("[") -> {
                    currentSection = ""
                }
                else -> {
                    when (currentSection) {
                        "versions" -> {
                            val parts = trimmedLine.split('=', limit = 2)
                            if (parts.size == 2) {
                                val key = parts[0].trim()
                                val value = parts[1].trim().removeSurrounding("\"")
                                versions[key] = value
                            }
                        }
                        "libraries" -> {
                            if (trimmedLine.contains('=')) {
                                val parts = trimmedLine.split('=', limit = 2)
                                val key = parts[0].trim()
                                val value = parts[1].trim()
                                if (value.startsWith('{')) {
                                    val libConfig = parseLibraryConfig(value)
                                    libraries[key] = libConfig
                                }
                            }
                        }
                    }
                }
            }
        }

        val versionsBlock = buildString {
            appendLine("    object Versions {")
            for ((key, value) in versions) {
                appendLine("          const val ${key.replace('-', '_')} = \"$value\"")
            }
            appendLine("    }")
        }

        val librariesBlock = buildString {
            appendLine("    object Libraries {")
            for ((key, value) in libraries) {
                val group = value["group"] ?: ""
                val name = value["name"] ?: ""
                val versionRef = value["version.ref"]?.replace("-", "_")
                if (versionRef == null) {
                    appendLine("        val ${key.replace('-', '_')} = Library(group = \"$group\", name = \"$name\", version = \"\")")
                } else {
                    appendLine("        val ${key.replace('-', '_')} = Library(group = \"$group\", name = \"$name\", version = Versions.$versionRef)")
                }

            }
            appendLine("    }")
        }

        return """
    // Auto-generated by VersionCatalogGeneratorPlugin
    package ai.gaiahub.buildconvention.libs 
    object Libs {
    $versionsBlock
    $librariesBlock
        data class Library(val group: String, val name: String, val version: String)
    }
                    """.trimIndent()
    }

    private fun parseLibraryConfig(value: String): Map<String, String> {
        val result = mutableMapOf<String, String>()
        val content = value.removeSurrounding("{", "}").trim()
        val entries = content.split(',')

        for (entry in entries) {
            val parts = entry.split('=', limit = 2)
            if (parts.size == 2) {
                val key = parts[0].trim()
                val value = parts[1].trim().removeSurrounding("\"")
                result[key] = value
            }
        }

        return result
    }
}